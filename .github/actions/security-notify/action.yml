name: 'Security Notifications'
description: 'Send security alerts and create issues for vulnerability findings'

inputs:
  scan-result:
    description: 'Result from security scan (pass, fail, review-required)'
    required: true
  critical-count:
    description: 'Number of critical vulnerabilities'
    required: true
  high-count:
    description: 'Number of high vulnerabilities'
    required: true
  medium-count:
    description: 'Number of medium vulnerabilities'
    required: true
  low-count:
    description: 'Number of low vulnerabilities'
    required: true
  scan-type:
    description: 'Type of scan performed (fs, image)'
    required: true
  environment:
    description: 'Target environment'
    required: true
  github-token:
    description: 'GitHub token for creating issues'
    required: true
  slack-webhook:
    description: 'Slack webhook URL for notifications'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Create security issue for critical vulnerabilities
      if: inputs.scan-result == 'fail' && inputs.critical-count > 0
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { owner, repo } = context.repo;
          const critical = ${{ inputs.critical-count }};
          const high = ${{ inputs.high-count }};
          const scanType = '${{ inputs.scan-type }}';
          const environment = '${{ inputs.environment }}';

          const title = `üö® CRITICAL Security Vulnerabilities Found - ${scanType} scan`;
          const body = `## Critical Security Alert

          **Scan Details:**
          - **Type:** ${scanType}
          - **Environment:** ${environment}
          - **Commit:** ${context.sha}
          - **Workflow:** ${context.workflow}

          **Vulnerability Summary:**
          - üî¥ **Critical:** ${critical}
          - üü† **High:** ${high}
          - üü° **Medium:** ${{ inputs.medium-count }}
          - üîµ **Low:** ${{ inputs.low-count }}

          **Action Required:**
          ${critical > 0 ? '‚ùå **DEPLOYMENT BLOCKED** - Critical vulnerabilities must be resolved immediately' : ''}

          **Next Steps:**
          1. Review security scan results in the [Security tab](https://github.com/${owner}/${repo}/security)
          2. Download detailed results from workflow artifacts
          3. Update vulnerable dependencies or container base images
          4. Re-run security scan to verify fixes
          5. Consider adding to security allowlist if false positive

          **Security Scan Results:**
          - [View Workflow Run](https://github.com/${owner}/${repo}/actions/runs/${context.runId})
          - [Security Advisories](https://github.com/${owner}/${repo}/security/advisories)
          - [Dependency Graph](https://github.com/${owner}/${repo}/network/dependencies)

          **Auto-generated by:** Security scanning workflow
          **Created:** ${new Date().toISOString()}
          `;

          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner,
            repo,
            state: 'open',
            labels: 'security,critical',
            per_page: 10
          });

          const existingIssue = issues.data.find(issue =>
            issue.title.includes('CRITICAL Security Vulnerabilities') &&
            issue.body.includes(context.sha.substring(0, 7))
          );

          if (!existingIssue) {
            const issue = await github.rest.issues.create({
              owner,
              repo,
              title,
              body,
              labels: ['security', 'critical', 'bug', 'priority-high'],
              assignees: ['${{ github.actor }}']
            });

            console.log(`Created security issue: ${issue.data.html_url}`);
          } else {
            console.log('Similar security issue already exists');
          }

    - name: Create security issue for high vulnerabilities
      if: inputs.scan-result == 'review-required' && inputs.high-count > 0
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { owner, repo } = context.repo;
          const high = ${{ inputs.high-count }};
          const scanType = '${{ inputs.scan-type }}';
          const environment = '${{ inputs.environment }}';

          const title = `‚ö†Ô∏è High Severity Vulnerabilities Require Review - ${scanType} scan`;
          const body = `## Security Review Required

          **Scan Details:**
          - **Type:** ${scanType}
          - **Environment:** ${environment}
          - **Commit:** ${context.sha}
          - **Workflow:** ${context.workflow}

          **Vulnerability Summary:**
          - üî¥ **Critical:** ${{ inputs.critical-count }}
          - üü† **High:** ${high}
          - üü° **Medium:** ${{ inputs.medium-count }}
          - üîµ **Low:** ${{ inputs.low-count }}

          **Action Required:**
          ‚ö†Ô∏è **MANUAL REVIEW NEEDED** - High severity vulnerabilities found

          **Review Process:**
          1. Assess business impact and risk level
          2. Determine if vulnerabilities affect production systems
          3. Plan remediation timeline
          4. Approve deployment if risk is acceptable
          5. Schedule vulnerability fixes for next release cycle

          **Security Resources:**
          - [Security Scan Results](https://github.com/${owner}/${repo}/actions/runs/${context.runId})
          - [Security Tab](https://github.com/${owner}/${repo}/security)
          - [Vulnerability Database](https://github.com/advisories)

          **Auto-generated by:** Security scanning workflow
          **Created:** ${new Date().toISOString()}
          `;

          // Check for existing high severity issues
          const issues = await github.rest.issues.listForRepo({
            owner,
            repo,
            state: 'open',
            labels: 'security,high-severity',
            per_page: 10
          });

          const existingIssue = issues.data.find(issue =>
            issue.title.includes('High Severity Vulnerabilities') &&
            issue.body.includes(context.sha.substring(0, 7))
          );

          if (!existingIssue) {
            const issue = await github.rest.issues.create({
              owner,
              repo,
              title,
              body,
              labels: ['security', 'high-severity', 'review-required'],
              assignees: ['${{ github.actor }}']
            });

            console.log(`Created security review issue: ${issue.data.html_url}`);
          }

    - name: Send Slack notification for critical vulnerabilities
      if: inputs.slack-webhook != '' && inputs.scan-result == 'fail'
      shell: bash
      run: |
        WEBHOOK_URL="${{ inputs.slack-webhook }}"
        if [[ -n "$WEBHOOK_URL" ]]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "üö® CRITICAL Security Alert",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üö® Critical Security Vulnerabilities Detected"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:* ${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:* ${{ inputs.environment }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Scan Type:* ${{ inputs.scan-type }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* `${{ github.sha }}`"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*üî¥ Critical:* ${{ inputs.critical-count }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üü† High:* ${{ inputs.high-count }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üü° Medium:* ${{ inputs.medium-count }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üîµ Low:* ${{ inputs.low-count }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚ùå *Deployment has been blocked* due to critical security vulnerabilities."
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Security Tab"
                      },
                      "url": "https://github.com/${{ github.repository }}/security"
                    }
                  ]
                }
              ]
            }' \
            "$WEBHOOK_URL"
        fi

    - name: Send Slack notification for review required
      if: inputs.slack-webhook != '' && inputs.scan-result == 'review-required'
      shell: bash
      run: |
        WEBHOOK_URL="${{ inputs.slack-webhook }}"
        if [[ -n "$WEBHOOK_URL" ]]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "‚ö†Ô∏è Security Review Required",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "‚ö†Ô∏è Security Review Required"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:* ${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:* ${{ inputs.environment }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Scan Type:* ${{ inputs.scan-type }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*High Vulnerabilities:* ${{ inputs.high-count }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please review security findings before proceeding with deployment."
                  }
                }
              ]
            }' \
            "$WEBHOOK_URL"
        fi

    - name: Create security summary comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { owner, repo } = context.repo;
          const result = '${{ inputs.scan-result }}';
          const critical = ${{ inputs.critical-count }};
          const high = ${{ inputs.high-count }};
          const medium = ${{ inputs.medium-count }};
          const low = ${{ inputs.low-count }};

          let status_emoji = '‚úÖ';
          let status_text = 'Passed';
          let action_required = 'No action required - security checks passed.';

          if (result === 'fail') {
            status_emoji = '‚ùå';
            status_text = 'Failed';
            action_required = '**Action Required:** Critical vulnerabilities must be resolved before merging.';
          } else if (result === 'review-required') {
            status_emoji = '‚ö†Ô∏è';
            status_text = 'Review Required';
            action_required = '**Action Required:** Manual security review needed before merging.';
          }

          const comment = `## ${status_emoji} Security Scan Results

          **Status:** ${status_text}
          **Scan Type:** ${{ inputs.scan-type }}

          ### Vulnerability Summary
          | Severity | Count | Status |
          |----------|-------|--------|
          | üî¥ Critical | ${critical} | ${critical > 0 ? '‚ùå' : '‚úÖ'} |
          | üü† High | ${high} | ${high > 5 ? '‚ö†Ô∏è' : '‚úÖ'} |
          | üü° Medium | ${medium} | ${medium > 20 ? '‚ö†Ô∏è' : '‚úÖ'} |
          | üîµ Low | ${low} | ‚ÑπÔ∏è |

          ${action_required}

          ### Resources
          - [View detailed results](https://github.com/${owner}/${repo}/actions/runs/${context.runId})
          - [Security tab](https://github.com/${owner}/${repo}/security)
          - [Security policy](.github/security-policy.yml)

          <details>
          <summary>Security Policy Thresholds</summary>

          - **Critical:** 0 allowed (blocks deployment)
          - **High:** 5 allowed (requires review if exceeded)
          - **Medium:** 20 allowed (requires review if exceeded)
          - **Low:** Unlimited (informational only)

          </details>
          `;

          if (context.payload.pull_request) {
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });
          }