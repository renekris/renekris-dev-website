name: Deploy Website

on:
  push:
    branches: [ main, dev ]
    paths-ignore:
      - 'README.md'
      - '.github/**'

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Determine deployment environment
      id: env
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
          echo "STACK_FILE=docker-stack-traefik.yml" >> $GITHUB_OUTPUT
          echo "STACK_NAME=renekris-stack" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=latest-production" >> $GITHUB_OUTPUT
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
          echo "STACK_FILE=docker-stack-staging.yml" >> $GITHUB_OUTPUT
          echo "STACK_NAME=renekris-staging" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=latest-staging" >> $GITHUB_OUTPUT
        fi
        echo "Deploying ${{ github.ref_name }} branch to $ENVIRONMENT environment"
    
    - name: Deploy to ${{ steps.env.outputs.ENVIRONMENT }}
      run: |
        echo "🚀 Starting website deployment to ${{ steps.env.outputs.ENVIRONMENT }}"
        echo "📦 Deploying from branch: ${{ github.ref_name }}"
        
        # Update website repository to exact commit being deployed
        echo "📥 Updating website repository..."
        cd /opt/renekris-dev-website
        git fetch origin
        git reset --hard ${{ github.sha }}
        
        # Build Docker image
        echo "🔨 Building Docker image..."
        docker build -t renekris-web:${{ steps.env.outputs.IMAGE_TAG }} .
        
        # Update infrastructure repository to dev branch
        echo "📥 Updating infrastructure repository..."
        cd /opt/renekris-infrastructure
        
        # Clean any problematic files and reset repository state
        if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
          echo "🧹 Cleaning untracked files and resetting repository..."
          git clean -fd
          git reset --hard HEAD
        fi
        
        git fetch origin
        git reset --hard origin/dev
        
        # Deploy stack
        echo "🚀 Deploying stack..."
        docker stack deploy -c ${{ steps.env.outputs.STACK_FILE }} ${{ steps.env.outputs.STACK_NAME }}
        
        echo "✅ Deployment completed"
    
    - name: Verify ${{ steps.env.outputs.ENVIRONMENT }} deployment
      run: |
        echo "🔍 Verifying deployment to ${{ steps.env.outputs.ENVIRONMENT }}..."
        
        # Wait for service to be ready
        echo "⏳ Waiting for service to be ready..."
        sleep 30
        
        # Test health endpoint
        if [ "${{ steps.env.outputs.ENVIRONMENT }}" = "staging" ]; then
          HEALTH_URL="https://staging.renekris.dev/health"
        else
          HEALTH_URL="https://renekris.dev/health"
        fi
        
        echo "🏥 Testing health endpoint: $HEALTH_URL"
        if curl -f -k "$HEALTH_URL" > /dev/null; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed"
          exit 1
        fi
        
        echo "🎉 Deployment to ${{ steps.env.outputs.ENVIRONMENT }} completed successfully!"