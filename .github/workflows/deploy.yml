name: Build & Deploy

on:
  push:
    branches: [main, dev]

# Prevent concurrent deployments to same environment
concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: self-hosted
    timeout-minutes: 15

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint & Test
      run: |
        npm run lint
        npm test -- --coverage --watchAll=false

    - name: Build
      run: npm run build

    - name: Set deployment variables
      id: vars
      run: |
        if [ "${{ github.ref_name }}" = "main" ]; then
          echo "image=renekris-website:production-latest" >> $GITHUB_OUTPUT
          echo "service=production-website_web" >> $GITHUB_OUTPUT
          echo "url=https://renekris.dev" >> $GITHUB_OUTPUT
          echo "env=Production" >> $GITHUB_OUTPUT
        else
          echo "image=renekris-website:staging-latest" >> $GITHUB_OUTPUT
          echo "service=staging-website_web" >> $GITHUB_OUTPUT
          echo "url=https://staging.renekris.dev" >> $GITHUB_OUTPUT
          echo "env=Staging" >> $GITHUB_OUTPUT
        fi

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        load: true
        tags: ${{ steps.vars.outputs.image }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

    - name: Deploy to Swarm
      id: deploy
      run: |
        echo "Deploying ${{ steps.vars.outputs.image }} to ${{ steps.vars.outputs.env }}..."
        docker service update \
          --force \
          --image ${{ steps.vars.outputs.image }} \
          --update-parallelism 1 \
          --update-delay 10s \
          ${{ steps.vars.outputs.service }}

    - name: Wait for convergence
      run: |
        echo "Waiting for service convergence..."
        for i in {1..60}; do
          RUNNING=$(docker service ps ${{ steps.vars.outputs.service }} --filter "desired-state=running" --format "{{.CurrentState}}" | grep -c "Running" || echo "0")
          if [ "$RUNNING" -gt 0 ]; then
            echo "Service converged successfully"
            exit 0
          fi
          echo "Attempt $i/60: No running tasks yet..."
          sleep 5
        done
        echo "Service failed to converge"
        exit 1

    - name: Health check
      run: |
        echo "Health checking ${{ steps.vars.outputs.url }}..."
        MAX_ATTEMPTS=10
        ATTEMPT=0

        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT + 1))

          if curl -f -s --max-time 10 "${{ steps.vars.outputs.url }}" > /dev/null; then
            echo "✓ Health check passed (attempt $ATTEMPT/$MAX_ATTEMPTS)"
            exit 0
          fi

          echo "✗ Attempt $ATTEMPT/$MAX_ATTEMPTS failed"
          [ $ATTEMPT -lt $MAX_ATTEMPTS ] && sleep 15
        done

        echo "Health check failed after $MAX_ATTEMPTS attempts"
        exit 1

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed - rolling back..."
        docker service rollback ${{ steps.vars.outputs.service }}

        echo "Waiting for rollback..."
        sleep 30

        if curl -f -s --max-time 10 "${{ steps.vars.outputs.url }}" > /dev/null; then
          echo "Rollback successful"
        else
          echo "Rollback may have failed - manual intervention required"
        fi

    - name: Deployment summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ steps.vars.outputs.env }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ steps.vars.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ steps.vars.outputs.service }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ steps.vars.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY