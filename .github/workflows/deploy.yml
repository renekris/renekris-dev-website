name: Local Build & Deploy

on:
  push:
    branches: [main, dev]

jobs:
  local-deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache node_modules
      id: cache-node-modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          node-modules-${{ runner.os }}-

    - name: Install dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: npm ci --no-audit

    - name: Run tests
      run: |
        npm run lint
        npm test -- --coverage --watchAll=false

    - name: Build application
      run: npm run build

    - name: Set image tag
      id: tag
      run: |
        if [ "${{ github.ref_name }}" = "main" ]; then
          echo "tag=renekris-website:production-latest" >> $GITHUB_OUTPUT
          echo "service=production-website_web" >> $GITHUB_OUTPUT
        else
          echo "tag=renekris-website:staging-latest" >> $GITHUB_OUTPUT
          echo "service=staging-website_web" >> $GITHUB_OUTPUT
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image with BuildKit caching
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ steps.tag.outputs.tag }}
        cache-from: |
          type=local,src=/tmp/.buildx-cache
          type=gha
        cache-to: |
          type=local,dest=/tmp/.buildx-cache-new,mode=max
          type=gha,mode=max
        load: true

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Deploy to Docker Swarm
      run: |
        echo "Updating Docker service: ${{ steps.tag.outputs.service }}"
        docker service update --force --image ${{ steps.tag.outputs.tag }} ${{ steps.tag.outputs.service }}

        echo "Waiting for service convergence..."
        timeout 300 bash -c 'until [ "$(docker service ps ${{ steps.tag.outputs.service }} --format "table {{.CurrentState}}" | grep -c "Running")" -gt 0 ]; do sleep 5; done'
        echo "Service updated successfully"

    - name: Health check deployment
      run: |
        if [ "${{ github.ref_name }}" = "main" ]; then
          URL="https://renekris.dev"
        else
          URL="https://staging.renekris.dev"
        fi

        echo "Waiting for deployment to be ready..."
        sleep 30

        echo "Testing deployment health..."
        for i in {1..10}; do
          if curl -f --max-time 10 "$URL" > /dev/null 2>&1; then
            echo "Deployment successful - site is responding"
            exit 0
          fi
          echo "Attempt $i/10 failed, waiting..."
          sleep 15
        done

        echo "Health check failed after 10 attempts"
        echo "Rolling back deployment..."
        docker service rollback ${{ steps.tag.outputs.service }}
        exit 1